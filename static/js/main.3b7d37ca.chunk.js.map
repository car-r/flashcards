{"version":3,"sources":["components/flashcard/FlashcardElements.js","components/flashcard/index.js","components/flashcardlist/FlashcardListElements.js","components/flashcardlist/index.js","App.js","reportWebVitals.js","index.js"],"names":["FlashcardContainer","styled","div","props","height","flip","FlashcardFront","FlashcardQuestion","FlashcardOptions","FlashcardOption","p","FlashcardBack","Flashcard","flashcard","useState","setFlip","setHeight","frontEl","useRef","backEl","questionEl","console","log","useEffect","frontHeight","current","clientHeight","backHeight","Math","max","question","answer","options","onClick","ref","map","option","FlashcardListWrapper","FlashcardList","flashcards","id","App","setFlashcards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","className","onSubmit","e","preventDefault","a","params","amount","category","result","results","questionItem","index","correct_answer","incorrect_answers","Date","now","sort","random","fetchQuestions","htmlFor","name","type","min","step","defaultValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b7d37ca.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FlashcardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    border-radius: 0.25rem;\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.3);\n    background-color: transparent;\n    transform-style: preserve-3d;\n    transition: all 0.2s ease-in-out;\n    perspective: 1000px;\n    cursor: pointer;\n    height: ${props => props.height = `${props.height}px`};\n    transform: ${props => props.flip ? 'rotateY(180deg)' : 'rotateY(0)'};\n\n    &:hover {\n        box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.6);\n    }\n`\n\nexport const FlashcardFront = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    padding: 1em;\n    backface-visibility: hidden;\n    background-color: #fff;\n    height: 100%;\n    width: 100%;\n    left: 0;\n`\n\nexport const FlashcardQuestion = styled.div`\n    margin-bottom: 1em;\n`\n\nexport const FlashcardOptions = styled.div`\n\n`\n\nexport const FlashcardOption = styled.p`\n    margin-bottom: 0.5em;\n    color: #555;\n    font-size: 0.9rem;\n`\n\nexport const FlashcardBack = styled.div`\n    display: flex;\n    position: absolute;\n    padding: 1em;\n    backface-visibility: hidden;\n    transform: rotateY(180deg);\n    background-color: #fff;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n`","import React, {useState, useEffect, useRef} from 'react'\nimport { FlashcardBack, FlashcardContainer, FlashcardFront, FlashcardOption, FlashcardOptions, FlashcardQuestion, } from './FlashcardElements'\n\nconst Flashcard = ({flashcard}) => {\n    const [flip, setFlip] = useState(false)\n    const [height, setHeight] = useState('initial')\n\n    const frontEl = useRef()\n    const backEl = useRef()\n    const questionEl = useRef()\n\n    function setMaxHeight() {\n        const frontHeight = frontEl.current.clientHeight + questionEl.current.clientHeight + 45\n        const backHeight = backEl.current.clientHeight\n        \n\n        setHeight(Math.max(frontHeight, backHeight, 150))\n        \n    }\n    console.log(height)\n\n    useEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options])\n\n    return (\n        <FlashcardContainer onClick={() => setFlip(!flip)} flip={flip} height={height} >\n            <FlashcardFront >\n                <FlashcardQuestion ref={questionEl}>{flashcard.question}</FlashcardQuestion>\n                <FlashcardOptions ref={frontEl}>\n                    {flashcard.options.map(option => {\n                    return <FlashcardOption key={option}>{option}</FlashcardOption>\n                })}\n                </FlashcardOptions>\n            </FlashcardFront>\n            <FlashcardBack ref={backEl}>{flashcard.answer}</FlashcardBack>\n        </FlashcardContainer>\n    )\n}\n\nexport default Flashcard\n","import styled from \"styled-components\";\n\nexport const FlashcardListWrapper = styled.div`\n    display: grid;\n    align-items: center;\n    grid-template-columns: repeat(auto-fill, minmax(210px, 1fr));\n    gap: 1.5em;\n`","import React from 'react'\nimport Flashcard from '../flashcard'\nimport { FlashcardListWrapper } from './FlashcardListElements'\n\nconst FlashcardList = ({flashcards}) => {\n    return (\n        <FlashcardListWrapper>\n            {flashcards.map(flashcard => {\n                return <Flashcard flashcard={flashcard} key={flashcard.id}/>\n            })}\n        </FlashcardListWrapper>\n    )\n}\n\nexport default FlashcardList\n","import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\nimport FlashcardList from './components/flashcardlist';\nimport axios from 'axios'\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([])\n  const [categories, setCategories] = useState([])\n\n  const categoryEl = useRef()\n  const amountEl = useRef()\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php')\n    .then(res => {\n      setCategories(res.data.trivia_categories)\n    })\n  }, [])\n\n\n  // decode HTML and convert to string\n  function decodeString(str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    const fetchQuestions = async () => {\n      const result = await axios('https://opentdb.com/api.php', {\n        params: {\n          amount: amountEl.current.value,\n          category: categoryEl.current.value\n        }\n      })\n  \n      setFlashcards(result.data.results.map((questionItem, index) => {\n        const answer = decodeString(questionItem.correct_answer)\n        const options = [\n          ...questionItem.incorrect_answers.map(a => decodeString(a)), \n          answer\n        ]\n        return {\n          id: `${index}-${Date.now()}`,\n          question: decodeString(questionItem.question),\n          answer: answer,\n          options: options.sort(() => Math.random() - 0.5)\n        }\n      }))\n    }\n    fetchQuestions()\n  }\n\n  return (\n    <>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n            <label htmlFor=\"amount\">Number of Questions</label>\n            <input type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10} ref={amountEl}/>\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\">Generate</button>\n        </div>\n      </form>\n      <div className=\"AppContainer\">\n        <FlashcardList flashcards={flashcards}/>\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}