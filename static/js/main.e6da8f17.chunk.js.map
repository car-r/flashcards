{"version":3,"sources":["components/flashcard/FlashcardElements.js","components/flashcard/index.js","components/flashcardlist/FlashcardListElements.js","components/flashcardlist/index.js","App.js","reportWebVitals.js","index.js"],"names":["FlashcardContainer","styled","div","props","flip","FlashcardFront","FlashcardQuestion","FlashcardOptions","FlashcardOption","p","FlashcardBack","Flashcard","flashcard","useState","setFlip","onClick","question","options","map","option","answer","FlashcardListWrapper","FlashcardList","flashcards","id","SAMPLE_FLASHCARDS","App","setFlashcards","decodeString","str","textArea","document","createElement","innerHTML","value","useEffect","a","axios","result","data","results","questionItem","index","correct_answer","incorrect_answers","Date","now","sort","Math","random","fetchQuestions","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mRAEaA,EAAqBC,IAAOC,IAAV,mhBAed,SAAAC,GAAK,OAAIA,EAAMC,KAAO,kBAAoB,gBAO9CC,EAAiBJ,IAAOC,IAAV,yNAWdI,EAAoBL,IAAOC,IAAV,qDAIjBK,EAAmBN,IAAOC,IAAV,8BAIhBM,EAAkBP,IAAOQ,EAAV,iGAMfC,EAAgBT,IAAOC,IAAV,yR,OC3BXS,EAnBG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EACPC,oBAAS,GADF,mBACxBT,EADwB,KAClBU,EADkB,KAI/B,OACI,eAACd,EAAD,CAAoBe,QAAS,kBAAMD,GAASV,IAAOA,KAAMA,EAAzD,UACI,eAACC,EAAD,WACI,cAACC,EAAD,UAAoBM,EAAUI,WAC9B,cAACT,EAAD,UACKK,EAAUK,QAAQC,KAAI,SAAAC,GACvB,OAAO,cAACX,EAAD,UAAkBW,YAIjC,cAACT,EAAD,UAAgBE,EAAUQ,aCfzBC,EAAuBpB,IAAOC,IAAV,gDCYlBoB,EAVO,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACpB,OACI,cAACF,EAAD,UACKE,EAAWL,KAAI,SAAAN,GACZ,OAAO,cAAC,EAAD,CAAWA,UAAWA,GAAgBA,EAAUY,U,iBCmCvE,IAAMC,EAAoB,CACxB,CACED,GAAI,EACJR,SAAU,iBACVI,OAAQ,IACRH,QAAS,CACP,IACA,IACA,IACA,MAGJ,CACEO,GAAI,EACJR,SAAU,mBACVI,OAAQ,KACRH,QAAS,CACP,KACA,KACA,KACA,OAGJ,CACEO,GAAI,EACJR,SAAU,mBACVI,OAAQ,KACRH,QAAS,CACP,KACA,KACA,KACA,QAKSS,EA1Ef,WAAgB,IAAD,EACuBb,mBAASY,GADhC,mBACNF,EADM,KACMI,EADN,KAyBb,SAASC,EAAaC,GACpB,IAAMC,EAAWC,SAASC,cAAc,YAExC,OADAF,EAASG,UAAYJ,EACdC,EAASI,MAGlB,OA5BAC,qBAAU,YACY,uCAAG,4BAAAC,EAAA,sEACAC,IAAM,yCADN,OACfC,EADe,OAGrBX,EAAcW,EAAOC,KAAKC,QAAQtB,KAAI,SAACuB,EAAcC,GACnD,IAAMtB,EAASQ,EAAaa,EAAaE,gBACnC1B,EAAO,sBACRwB,EAAaG,kBAAkB1B,KAAI,SAAAkB,GAAC,OAAIR,EAAaQ,OAD7C,CAEXhB,IAEF,MAAO,CACLI,GAAG,GAAD,OAAKkB,EAAL,YAAcG,KAAKC,OACrB9B,SAAUY,EAAaa,EAAazB,UACpCI,OAAQA,EACRH,QAASA,EAAQ8B,MAAK,kBAAMC,KAAKC,SAAW,WAb3B,2CAAH,qDAiBpBC,KACC,IAUD,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAe5B,WAAYA,OC1BlB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.e6da8f17.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FlashcardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    border-radius: 0.25rem;\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.3);\n    background-color: transparent;\n    transform-style: preserve-3d;\n    transition: all 0.2s ease-in-out;\n    height: 250px;\n    width: 250px;\n    perspective: 1000px;\n    cursor: pointer;\n    transform: ${props => props.flip ? 'rotateY(180deg)' : 'rotateY(0)'};\n\n    &:hover {\n        box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.6);\n    }\n`\n\nexport const FlashcardFront = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    padding: 1em;\n    backface-visibility: hidden;\n    background-color: #fff;\n    height: 100%;\n    left: 0;\n`\n\nexport const FlashcardQuestion = styled.div`\n    margin-bottom: 1em;\n`\n\nexport const FlashcardOptions = styled.div`\n\n`\n\nexport const FlashcardOption = styled.p`\n    margin-bottom: 0.5em;\n    color: #555;\n    font-size: 0.9rem;\n`\n\nexport const FlashcardBack = styled.div`\n    display: flex;\n    position: absolute;\n    padding: 1em;\n    backface-visibility: hidden;\n    transform: rotateY(180deg);\n    background-color: #fff;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n`","import React, {useState} from 'react'\nimport { FlashcardBack, FlashcardContainer, FlashcardFront, FlashcardOption, FlashcardOptions, FlashcardQuestion, } from './FlashcardElements'\n\nconst Flashcard = ({flashcard}) => {\n    const [flip, setFlip] = useState(false)\n\n\n    return (\n        <FlashcardContainer onClick={() => setFlip(!flip)} flip={flip}>\n            <FlashcardFront>\n                <FlashcardQuestion>{flashcard.question}</FlashcardQuestion>\n                <FlashcardOptions>\n                    {flashcard.options.map(option => {\n                    return <FlashcardOption>{option}</FlashcardOption>\n                })}\n                </FlashcardOptions>\n            </FlashcardFront>\n            <FlashcardBack>{flashcard.answer}</FlashcardBack>\n        </FlashcardContainer>\n    )\n}\n\nexport default Flashcard\n","import styled from \"styled-components\";\n\nexport const FlashcardListWrapper = styled.div`\n    display: grid;\n`","import React from 'react'\nimport Flashcard from '../flashcard'\nimport { FlashcardListWrapper } from './FlashcardListElements'\n\nconst FlashcardList = ({flashcards}) => {\n    return (\n        <FlashcardListWrapper>\n            {flashcards.map(flashcard => {\n                return <Flashcard flashcard={flashcard} key={flashcard.id}/>\n            })}\n        </FlashcardListWrapper>\n    )\n}\n\nexport default FlashcardList\n","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport FlashcardList from './components/flashcardlist';\nimport axios from 'axios'\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState(SAMPLE_FLASHCARDS)\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const result = await axios('https://opentdb.com/api.php?amount=10')\n  \n      setFlashcards(result.data.results.map((questionItem, index) => {\n        const answer = decodeString(questionItem.correct_answer)\n        const options = [\n          ...questionItem.incorrect_answers.map(a => decodeString(a)), \n          answer\n        ]\n        return {\n          id: `${index}-${Date.now()}`,\n          question: decodeString(questionItem.question),\n          answer: answer,\n          options: options.sort(() => Math.random() - 0.5)\n        }\n      }))\n    }\n    fetchQuestions()\n  }, [])\n\n  // decode HTML and convert to string\n  function decodeString(str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n  }\n\n  return (\n    <div className=\"App\">\n      <FlashcardList flashcards={flashcards}/>\n    </div>\n  );\n}\n\nconst SAMPLE_FLASHCARDS = [\n  {\n    id: 1,\n    question: 'what is 2 + 2?',\n    answer: '4',\n    options: [\n      '2',\n      '3',\n      '4',\n      '5'\n    ]\n  },\n  {\n    id: 2,\n    question: 'what is 10 + 10?',\n    answer: '20',\n    options: [\n      '20',\n      '33',\n      '40',\n      '15'\n    ]\n  },\n  {\n    id: 3,\n    question: 'what is 20 + 20?',\n    answer: '40',\n    options: [\n      '20',\n      '30',\n      '40',\n      '50'\n    ]\n  }\n]\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}